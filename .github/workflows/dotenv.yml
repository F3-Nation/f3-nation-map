name: Dotenv-vault diff

on:
  pull_request:
    branches:
      - '**'
    paths:
      - .env.vault            

jobs:
  comment:
    name: Dotenv-vault diff
    runs-on: ubuntu-latest
    env:
      DOTENV_ME: ${{ secrets.DOTENV_ME }}
      COMMENT_MESSAGE: ''
    steps:    
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v3

      - name: Install dotenv-vault
        run: |
          pnpm add -g dotenv-vault

      - name: Create comment
        uses: actions/github-script@v7
        with:
          script: |
            const util = require('util');
            const runExec = util.promisify(require('child_process').exec);  

            const { stdout } = await runExec(`git diff origin/${process.env.GITHUB_BASE_REF} -- .env.vault`)
            const stageMatches = [...stdout.matchAll(/\+DOTENV_VAULT_(?<stage>([a-z]+))/gim)]
              .reduce((prev, cur) => [
                ...prev,
                ...!prev.includes(cur.groups.stage)
                  ? [cur.groups.stage]
                  : []
              ], [])

            const { stdout: stdoutDev } = stageMatches.includes('DEVELOPMENT')
              ? (await runExec(`dotenv-vault versions development | awk 'NR>2 && NR<5 { printf "%5s %-20s\\n", $1, $2 }'`))
              : { stdout: ''}
            const { stdout: stdoutStage } = stageMatches.includes('STAGING')
              ? await runExec(`dotenv-vault versions staging | awk 'NR>2 && NR<5 { printf "%5s %-20s\\n", $1, $2 }'`)
              : { stdout: ''}
            const { stdout: stdoutProd } = stageMatches.includes('PRODUCTION')
              ? await runExec(`dotenv-vault versions production | awk 'NR>2 && NR<5 { printf "%5s %-20s\\n", $1, $2 }'`)
              : { stdout: ''}

            const mes = `Dotenv-vault Diff
              ${stdoutDev ? `\nDevelopment:\n${stdoutDev}` : '' }
              ${stdoutStage ? `\nStaging:\n${stdoutStage}` : '' }
              ${stdoutProd ? `\nProduction:\n${stdoutProd}` : '' }
            `
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: mes
            })