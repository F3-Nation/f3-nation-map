diff --git a/dist/adapters/node-http/core.js b/dist/adapters/node-http/core.js
index ad1b3e5d8fc9d5a9dcdcb5c719f2a3a66fc5f29a..929cdff6bc7299b8499e01581db08e7cc3fed747 100644
--- a/dist/adapters/node-http/core.js
+++ b/dist/adapters/node-http/core.js
@@ -102,14 +102,14 @@ const createOpenApiNodeHttpHandler = (opts) => {
                 ctx,
                 req,
             });
-            const meta = responseMeta === null || responseMeta === void 0 ? void 0 : responseMeta({
+            const meta = responseMeta === null || responseMeta === void 0 ? void 0 : typeof responseMeta === 'object' ? responseMeta : responseMeta({
                 type: (_e = procedure === null || procedure === void 0 ? void 0 : procedure.type) !== null && _e !== void 0 ? _e : 'unknown',
                 paths: (procedure === null || procedure === void 0 ? void 0 : procedure.path) ? [procedure === null || procedure === void 0 ? void 0 : procedure.path] : undefined,
                 ctx,
                 data: [data],
                 errors: [error],
             });
-            const errorShape = router.getErrorShape({
+            const errorShape = router._def.errorFormatter({
                 error,
                 type: (_f = procedure === null || procedure === void 0 ? void 0 : procedure.type) !== null && _f !== void 0 ? _f : 'unknown',
                 path: procedure === null || procedure === void 0 ? void 0 : procedure.path,
diff --git a/dist/utils/procedure.js b/dist/utils/procedure.js
index c838521e9c8d50febf7428a3c91060353bc0366e..c09c74f616543a4f7de90fc333eab04791c73c0b 100644
--- a/dist/utils/procedure.js
+++ b/dist/utils/procedure.js
@@ -17,12 +17,10 @@ const getInputOutputParsers = (procedure) => {
 };
 exports.getInputOutputParsers = getInputOutputParsers;
 const getProcedureType = (procedure) => {
-    if (procedure._def.query)
-        return 'query';
-    if (procedure._def.mutation)
-        return 'mutation';
-    if (procedure._def.subscription)
-        return 'subscription';
+    const allowedProcedureTypes = ['query', 'mutation', 'subscription']
+    if (allowedProcedureTypes.includes(procedure._def.type)) {
+        return procedure._def.type;
+    }
     throw new Error('Unknown procedure type');
 };
 const forEachOpenApiProcedure = (procedureRecord, callback) => {
