import { writeFileSync } from "fs";
import { config } from "dotenv";

// Assumes it is called from root and run from tooling/env/src/load-env.ts

const main = () => {
  const keyEnv = config({ path: "../../.env.key" });
  // Use no default so that our dotenv calls don't go down the vault path
  const DOTENV_KEY = keyEnv.parsed?.DOTENV_KEY ?? process.env.DOTENV_KEY; // If DOTENV_KEY not found in .env.key, get it from process.env

  if (!DOTENV_KEY) {
    throw new Error("No DOTENV_KEY found in .env.key or process.env");
  }

  const envs = config({ DOTENV_KEY, path: "../../.env.vault" }); // If DOTENV_KEY found, get the .env.vault, load it to get shared env variables

  if (!envs.parsed || Object.keys(envs.parsed).length === 0) {
    throw new Error("No .env.vault found or it is empty");
  }

  try {
    // This env is needed for the app
    writeFileSync(
      "../../apps/nextjs/.env",

      "# This file is generated by /scripts/load-env.ts\n" +
        "# DO NOT ATTEMPT TO EDIT THIS FILE\n" +
        Object.entries(envs.parsed)
          .map(([key, value]) => `${key}=${value}`)
          .join("\n"),
    );

    console.log("Successfully loaded .env.vault to .env");
  } catch (error) {
    console.error("Failed to load .env.vault to .env", error);
  }
};

main();
